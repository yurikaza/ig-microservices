/**
 * A client library for the w3name - IPNS over HTTP API. It provides a
 * convenient interface for creating names, making revisions to name records,
 * and publishing and resolving them via the HTTP API.
 *
 * @example
 * ```js
 * import { Web3Storage } from 'web3.storage'
 * import * as Name from 'web3.storage/name'
 *
 * const client = new Web3Storage({ token: API_TOKEN })
 * const name = await Name.create()
 *
 * console.log('Name:', name.toString())
 * // e.g. k51qzi5uqu5di9agapykyjh3tqrf7i14a7fjq46oo0f6dxiimj62knq13059lt
 *
 * // The value to publish
 * const value = '/ipfs/bafkreiem4twkqzsq2aj4shbycd4yvoj2cx72vezicletlhi7dijjciqpui'
 * const revision = await Name.v0(name, value)
 *
 * // Publish the revision
 * await Name.publish(client, revision, name.key)
 *
 * // Resolve the latest value
 * await Name.resolve(name)
 * ```
 * @module
 */
import { PrivateKey, PublicKey } from 'libp2p-crypto';
import type { PublicService, W3NameService } from './service.js';
/**
 * Name is an IPNS key ID.
 */
export declare class Name {
    _pubKey: PublicKey;
    /**
     * @param {PublicKey} pubKey Public key.
     */
    constructor(pubKey: PublicKey);
    get bytes(): Uint8Array;
    toString(): string;
}
/**
 * WritableName is a Name that has a signing key associated with it such that
 * new IPNS record revisions can be created and signed for it.
 */
export declare class WritableName extends Name {
    _privKey: PrivateKey;
    /**
     * @param {PrivateKey} privKey
     */
    constructor(privKey: PrivateKey);
    get key(): PrivateKey;
}
/**
 * Create a new name with associated signing key that can be used to create and
 * publish IPNS record revisions.
 */
export declare function create(): Promise<WritableName>;
/**
 * Parses string name to readable name.
 */
export declare function parse(name: string): Name;
/**
 * Create a name from an existing signing key (private key).
 */
export declare function from(key: Uint8Array): Promise<WritableName>;
/**
 * Create an initial version of the IPNS record for the passed name, set to the
 * passed value.
 */
export declare function v0(name: Name, value: string): Promise<Revision>;
/**
 * Create a revision of the passed IPNS record by incrementing the sequence
 * number and changing the value.
 */
export declare function increment(revision: Revision, value: string): Promise<Revision>;
/**
 * A representation of a IPNS record that may be initial or revised.
 */
export declare class Revision {
    _name: Name;
    _value: string;
    _sequence: bigint;
    _validity: string;
    constructor(name: Name, value: string, sequence: bigint, validity: string);
    get name(): Name;
    get value(): string;
    get sequence(): bigint;
    /**
     * RFC3339 date string.
     */
    get validity(): string;
    /**
     * Note: if `revision.name` is a `WritableName` then signing key data will be
     * lost. i.e. the private key is not encoded.
     *
     * @param {Revision} revision Revision to encode.
     */
    static encode(revision: Revision): Uint8Array;
    /**
     * @param {Uint8Array} bytes
     */
    static decode(bytes: Uint8Array): Revision;
}
/**
 * Publish a name revision to Web3.Storage.
 *
 * ⚠️ Name records are not _yet_ published to or updated from the IPFS network.
 * Working with name records simply updates the Web3.Storage cache of data.
 */
export declare function publish(service: W3NameService, revision: Revision, key: PrivateKey): Promise<void>;
/**
 * Resolve the current IPNS record revision for the passed name.
 */
export declare function resolve(service: PublicService, name: Name): Promise<Revision>;
//# sourceMappingURL=name.d.ts.map